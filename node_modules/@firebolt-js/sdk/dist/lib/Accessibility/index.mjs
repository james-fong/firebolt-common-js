/*
 * Copyright 2021 Comcast Cable Communications Management, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import Transport from '../Transport/index.mjs'
import Events from '../Events/index.mjs'
import { registerEvents } from '../Events/index.mjs'
import Prop from '../Prop/index.mjs'

registerEvents('Accessibility', ["audioDescriptionSettingsChanged","closedCaptionsSettingsChanged","voiceGuidanceSettingsChanged"])


Transport.registerDeprecatedMethod('Accessibility', 'closedCaptions', 'Use Accessibility.closedCaptionsSettings() instead.')
Transport.registerDeprecatedMethod('Accessibility', 'voiceGuidance', 'Use Accessibility.voiceGuidanceSettings() instead.')

// onAudioDescriptionSettingsChanged is accessed via listen('audioDescriptionSettingsChanged, ...)

// onClosedCaptionsSettingsChanged is accessed via listen('closedCaptionsSettingsChanged, ...)

// onVoiceGuidanceSettingsChanged is accessed via listen('voiceGuidanceSettingsChanged, ...)


    // Methods
function audioDescriptionSettings() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Accessibility',  'audioDescriptionSettings', {  }, callbackOrValue, false, true, 0)
}
  function clear(...args) {
    return Events.clear('Accessibility', ...args)
  }


function closedCaptions() {

  const transforms = null

  return Transport.send('Accessibility', 'closedCaptions', {  }, transforms)
}
function closedCaptionsSettings() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Accessibility',  'closedCaptionsSettings', {  }, callbackOrValue, false, true, 0)
}
  function listen(...args) {
    return Events.listen('Accessibility', ...args)
  } 
  
  function once(...args) {
    return Events.once('Accessibility', ...args)
  }


function voiceGuidance() {

  const transforms = null

  return Transport.send('Accessibility', 'voiceGuidance', {  }, transforms)
}
function voiceGuidanceSettings() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Accessibility',  'voiceGuidanceSettings', {  }, callbackOrValue, false, true, 0)
}
  
export default {

events: {
    CLOSED_CAPTIONS_SETTINGS_CHANGED: 'closedCaptionsSettingsChanged',
    VOICE_GUIDANCE_SETTINGS_CHANGED: 'voiceGuidanceSettingsChanged',
    AUDIO_DESCRIPTION_SETTINGS_CHANGED: 'audioDescriptionSettingsChanged',
},

audioDescriptionSettings,
clear,
closedCaptions,
closedCaptionsSettings,
listen,
once,
voiceGuidance,
voiceGuidanceSettings
}
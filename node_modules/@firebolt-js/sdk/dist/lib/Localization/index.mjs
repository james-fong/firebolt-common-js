/*
 * Copyright 2021 Comcast Cable Communications Management, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import Transport from '../Transport/index.mjs'
import Events from '../Events/index.mjs'
import { registerEvents } from '../Events/index.mjs'
import Prop from '../Prop/index.mjs'

registerEvents('Localization', ["countryCodeChanged","languageChanged","localeChanged","localityChanged","postalCodeChanged"])



// onCountryCodeChanged is accessed via listen('countryCodeChanged, ...)

// onLanguageChanged is accessed via listen('languageChanged, ...)

// onLocaleChanged is accessed via listen('localeChanged, ...)

// onLocalityChanged is accessed via listen('localityChanged, ...)

// onPostalCodeChanged is accessed via listen('postalCodeChanged, ...)


    // Methods

function additionalInfo() {

  const transforms = null

  return Transport.send('Localization', 'additionalInfo', {  }, transforms)
}
  function clear(...args) {
    return Events.clear('Localization', ...args)
  }

function countryCode() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Localization',  'countryCode', {  }, callbackOrValue, false, true, 0)
}
function language() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Localization',  'language', {  }, callbackOrValue, false, true, 0)
}

function latlon() {

  const transforms = null

  return Transport.send('Localization', 'latlon', {  }, transforms)
}
  function listen(...args) {
    return Events.listen('Localization', ...args)
  } 
  
function locale() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Localization',  'locale', {  }, callbackOrValue, false, true, 0)
}
function locality() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Localization',  'locality', {  }, callbackOrValue, false, true, 0)
}
  function once(...args) {
    return Events.once('Localization', ...args)
  }

function postalCode() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Localization',  'postalCode', {  }, callbackOrValue, false, true, 0)
}
  
export default {

events: {
    LOCALITY_CHANGED: 'localityChanged',
    POSTAL_CODE_CHANGED: 'postalCodeChanged',
    COUNTRY_CODE_CHANGED: 'countryCodeChanged',
    LANGUAGE_CHANGED: 'languageChanged',
    LOCALE_CHANGED: 'localeChanged',
},

additionalInfo,
clear,
countryCode,
language,
latlon,
listen,
locale,
locality,
once,
postalCode
}
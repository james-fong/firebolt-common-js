/*
 * Copyright 2021 Comcast Cable Communications Management, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import Transport from '../Transport/index.mjs'
import Events from '../Events/index.mjs'
import { registerEvents } from '../Events/index.mjs'
import Prop from '../Prop/index.mjs'

registerEvents('Device', ["audioChanged","deviceNameChanged","hdcpChanged","hdrChanged","nameChanged","networkChanged","screenResolutionChanged","videoResolutionChanged"])


Transport.registerDeprecatedMethod('Device', 'onDeviceNameChanged', 'Use Device.name() instead.')

function version() {
  return new Promise( (resolve, reject) => {
      Transport.send('device', 'version').then( v => {
          v = v || {}
          v.sdk = v.sdk || {}
          v.sdk.major = parseInt('0')
          v.sdk.minor = parseInt('15')
          v.sdk.patch = parseInt('0')
          v.sdk.readable = 'Firebolt Core SDK 0.15.0-next.2'
          resolve(v)    
      }).catch(error => {
          reject(error)
      })
  })
}


    // Methods
function audio() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'audio', {  }, callbackOrValue, false, true, 0)
}
  function clear(...args) {
    return Events.clear('Device', ...args)
  }

function distributor() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'distributor', {  }, callbackOrValue, true, true, 0)
}
function hdcp() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'hdcp', {  }, callbackOrValue, false, true, 0)
}
function hdr() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'hdr', {  }, callbackOrValue, false, true, 0)
}
function id() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'id', {  }, callbackOrValue, true, true, 0)
}
  function listen(...args) {
    return Events.listen('Device', ...args)
  } 
  
function make() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'make', {  }, callbackOrValue, true, true, 0)
}
function model() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'model', {  }, callbackOrValue, true, true, 0)
}
function name() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'name', {  }, callbackOrValue, false, true, 0)
}
function network() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'network', {  }, callbackOrValue, false, true, 0)
}
  function once(...args) {
    return Events.once('Device', ...args)
  }

function platform() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'platform', {  }, callbackOrValue, true, true, 0)
}
function screenResolution() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'screenResolution', {  }, callbackOrValue, false, true, 0)
}
function sku() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'sku', {  }, callbackOrValue, true, true, 0)
}
function type() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'type', {  }, callbackOrValue, true, true, 0)
}
function uid() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'uid', {  }, callbackOrValue, true, true, 0)
}
function videoResolution() {
  const callbackOrValue = arguments[0]
  return Prop.prop('Device',  'videoResolution', {  }, callbackOrValue, false, true, 0)
}

export default {

events: {
    DEVICE_NAME_CHANGED: 'deviceNameChanged',
    NAME_CHANGED: 'nameChanged',
    HDCP_CHANGED: 'hdcpChanged',
    HDR_CHANGED: 'hdrChanged',
    AUDIO_CHANGED: 'audioChanged',
    SCREEN_RESOLUTION_CHANGED: 'screenResolutionChanged',
    VIDEO_RESOLUTION_CHANGED: 'videoResolutionChanged',
    NETWORK_CHANGED: 'networkChanged',
},

NetworkState: {
    CONNECTED: 'connected',
    DISCONNECTED: 'disconnected',
},

NetworkType: {
    WIFI: 'wifi',
    ETHERNET: 'ethernet',
    HYBRID: 'hybrid',
},

AudioProfile: {
    STEREO: 'stereo',
    DOLBY_DIGITAL_5_1: 'dolbyDigital5.1',
    DOLBY_DIGITAL_7_1: 'dolbyDigital7.1',
    DOLBY_DIGITAL_5_1_PLUS: 'dolbyDigital5.1+',
    DOLBY_DIGITAL_7_1_PLUS: 'dolbyDigital7.1+',
    DOLBY_ATMOS: 'dolbyAtmos',
},


  version,
audio,
clear,
distributor,
hdcp,
hdr,
id,
listen,
make,
model,
name,
network,
once,
platform,
screenResolution,
sku,
type,
uid,
videoResolution
}
